game_ai.c:      if (snake->loot[i].taked == 0 && snake->loot[i].type == ORBE) return 0;
game_ai.c:  printf("life: %d\n", snake->life);
game_ai.c:  if (snake->guardian_size < 8)
game_ai.c:      if (snake->life > 1) snake->life -= 1;
game_ai.c:	  if (snake->loot[i].taked == 0 && snake->loot[i].type == ORBE)
game_ai.c:	       snake->loot[i].taked = 1;
game_ai.c:	       snake->player_pos_x = X_DEFAULT;
game_ai.c:	       snake->player_pos_y = Y_DEFAULT;
guardian.c:      n = &(snake->guardian[i]);
guardian.c:	  apply_surface(n->pos_x * 32, n->pos_y * 32, snake->surfaces[SNAKE], snake->surfaces[SCREEN]);
guardian.c:      n = &(snake->guardian[i]);
guardian.c:	  if (n->pos_x == snake->player_pos_x && n->pos_y == snake->player_pos_y)
guardian.c:	      snake->life -= 1;
guardian.c:	      snake->player_pos_x = X_DEFAULT;
guardian.c:	      snake->player_pos_y = Y_DEFAULT;
guardian.c:  if (snake->guardian_size > 8) return 1;
guardian.c:  n = &(snake->guardian[i]);
guardian.c:  while (++j < snake->guardian_size)
guardian_move.c:      n = &(snake->guardian[i]);
life.c:  if (snake->life <= 0) return 1;
life.c:      if (snake->loot[i].pos_x == snake->player_pos_x &&
life.c:	  snake->loot[i].pos_y == snake->player_pos_y &&
life.c:	  snake->loot[i].type == LIFE &&
life.c:	  snake->loot[i].taked == 0)
life.c:	  snake->life += 1;
loot.c:      snake->loot[i].pos_x = tabx[i];
loot.c:      snake->loot[i].pos_y = taby[i];
loot.c:      snake->loot[i].type = (tabx[i] == 6 ? 1 : 0);
loot.c:      snake->loot[i].taked = 0;
main.c:      if (snake->clock <= 0)
main.c:          apply_surface(0, 0, snake->surfaces[TIMEOUT], snake->surfaces[SCREEN]);
main.c:          SDL_Flip(snake->surfaces[SCREEN]);
main.c:      printf("%f, %f, %d\n", new_clock, old_clock, snake->clock);
main.c:	   snake->clock -= 1;
main.c:      if (horloge_courante - horloge_precedente >= snake->clock_speed)
main.c:      if (check_if_win(snake) && snake->guardian_size <= 8)
main.c:	  apply_surface(0, 0, snake->surfaces[LEVELUP], snake->surfaces[SCREEN]);
main.c:	  SDL_Flip(snake->surfaces[SCREEN]);
main.c:	  snake->guardian_size += 1;
main.c:	  snake->clock = 60;
main.c:          apply_surface(0, 0, snake->surfaces[WIN], snake->surfaces[SCREEN]);
main.c:          SDL_Flip(snake->surfaces[SCREEN]);
main.c:	  SDL_Flip(snake->surfaces[SCREEN]);
main.c:      if(snake->life == 0)
main.c:  strcpy(snake->map[0], "##################");
main.c:  strcpy(snake->map[1], "#................#");
main.c:  strcpy(snake->map[2], "#.##..##..##..##.#");
main.c:  strcpy(snake->map[3], "#.##..##..##..##.#");
main.c:  strcpy(snake->map[4], "#...##......##...#");
main.c:  strcpy(snake->map[5], "#...##......##...#");
main.c:  strcpy(snake->map[6], "#.##..##..##..##.#");
main.c:  strcpy(snake->map[7], "#.##..##..##..##.#");
main.c:  strcpy(snake->map[8], "#................#");
main.c:  strcpy(snake->map[9], "#................#");
main.c:  strcpy(snake->map[10],"#.##..##..##..##.#");
main.c:  strcpy(snake->map[11],"#.##..##..##..##.#");
main.c:  strcpy(snake->map[12],"#...##......##...#");
main.c:  strcpy(snake->map[13],"#...##......##...#");
main.c:  strcpy(snake->map[14],"#.##..##..##..##.#");
main.c:  strcpy(snake->map[15],"#.##..##..##..##.#");
main.c:  strcpy(snake->map[16],"#................#");
main.c:  strcpy(snake->map[17],"##################");
main.c:  SDL_FreeSurface(snake->surfaces[SCREEN]);
main.c:  SDL_FreeSurface(snake->surfaces[WALL]);
main.c:  SDL_FreeSurface(snake->surfaces[PACMAN]);
main.c:  SDL_FreeSurface(snake->surfaces[SNAKE]);
main.c:  SDL_FreeSurface(snake->surfaces[BACKGROUND]);
main.c:  SDL_FreeSurface(snake->surfaces[BLUE_ORBE]);
main.c:  SDL_FreeSurface(snake->surfaces[HEART]);
main.c:  SDL_FreeSurface(snake->surfaces[LEVELUP]);
move.c:  if (motion == GO_UP && snake->map[snake->player_pos_y - 1][snake->player_pos_x] != '#')
move.c:      snake->player_pos_y -= 1;
move.c:  else if (motion == GO_DOWN && snake->map[snake->player_pos_y + 1][snake->player_pos_x] != '#')
move.c:      snake->player_pos_y += 1;
move.c:  else if (motion == GO_LEFT && snake->map[snake->player_pos_y][snake->player_pos_x - 1] != '#')
move.c:      snake->player_pos_x -= 1;
move.c:  else if (motion == GO_RIGHT && snake->map[snake->player_pos_y][snake->player_pos_x + 1] != '#')
move.c:      snake->player_pos_x += 1;
sdl_game.c:      if (snake->player_pos_x == snake->loot[i].pos_x && snake->player_pos_y == snake->loot[i].pos_y)
sdl_game.c:	snake->loot[i].taked = 1;
sdl_game.c:      if (snake->loot[i].type == ORBE && snake->loot[i].taked == 0)
sdl_game.c:	apply_surface(snake->loot[i].pos_x * 32, snake->loot[i].pos_y * 32,  snake->surfaces[BLUE_ORBE], snake->surfaces[SCREEN]);
sdl_game.c:      else if (snake->loot[i].type == LIFE && snake->loot[i].taked == 0)
sdl_game.c:	apply_surface(snake->loot[i].pos_x * 32, snake->loot[i].pos_y * 32, snake->surfaces[HEART], snake->surfaces[SCREEN]);
sdl_game.c:  apply_surface(0, 0, snake->surfaces[BACKGROUND], snake->surfaces[SCREEN]);
sdl_game.c:          if (snake->map[j][i] == '#') apply_surface(i * 32, j * 32, snake->surfaces[WALL], snake->surfaces[SCREEN]);
sdl_game.c:  apply_surface(snake->player_pos_x * 32, snake->player_pos_y * 32, snake->surfaces[PACMAN], snake->surfaces[SCREEN]);
sdl_game.c:  if(SDL_Flip(snake->surfaces[SCREEN]) == -1) return 1;
sdl_game.c:      !(snake->surfaces[SCREEN] = SDL_SetVideoMode(576, 576, 16, SDL_HWSURFACE)))
sdl_game.c:  if (!(snake->surfaces[WALL] = load_image("img/wall.bmp")))
sdl_game.c:  if (!(snake->surfaces[PACMAN] = load_image("img/pacman.bmp")))
sdl_game.c:  // SDL_SetColorKey(snake->surfaces[PACMAN], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[PACMAN]->format,255,255,255)) ;
sdl_game.c:  if (!(snake->surfaces[SNAKE] = load_image("img/snake.bmp")))
sdl_game.c:  if (!(snake->surfaces[BACKGROUND] = load_image("img/background.bmp")))
sdl_game.c:  if (!(snake->surfaces[BLUE_ORBE] = load_image("img/blue_orbe.bmp")))
sdl_game.c:  SDL_SetColorKey(snake->surfaces[BLUE_ORBE], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[BLUE_ORBE]->format,255,255,255));
sdl_game.c:  if (!(snake->surfaces[HEART] = load_image("img/heart.bmp")))
sdl_game.c:  SDL_SetColorKey(snake->surfaces[HEART], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[HEART]->format,255,255,255)) ;
sdl_game.c:  if (!(snake->surfaces[LEVELUP] = load_image("img/levelup.bmp")))
sdl_game.c:  SDL_SetColorKey(snake->surfaces[LEVELUP], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[LEVELUP]->format,255,255,255)) ;
sdl_game.c:  if (!(snake->surfaces[WIN] = load_image("img/win.bmp")))
sdl_game.c:  SDL_SetColorKey(snake->surfaces[WIN], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[WIN]->format,255,255,255)) ;
sdl_game.c:  if (!(snake->surfaces[LOSE] = load_image("img/lose.bmp")))
sdl_game.c:  SDL_SetColorKey(snake->surfaces[LOSE], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[LOSE]->format,255,255,255)) ;
sdl_game.c:  if (!(snake->surfaces[TIMEOUT] = load_image("img/timeout.bmp")))
sdl_game.c:  SDL_SetColorKey(snake->surfaces[TIMEOUT], SDL_SRCCOLORKEY, SDL_MapRGB(snake->surfaces[TIMEOUT]->format,255,255,255)) ;
sdl_game.c:  snake->player_pos_x = X_DEFAULT;
sdl_game.c:  snake->player_pos_y = Y_DEFAULT;
sdl_game.c:  snake->life = 1;
sdl_game.c:  snake->clock_speed = 0.2f;
sdl_game.c:  snake->clock = 30; /*set startup clock in seconds*/
sdl_game.c:  snake->guardian_size = 1; /*WARNING need to be between 0 and 8*/
